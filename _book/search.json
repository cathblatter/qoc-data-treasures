[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LV: Analysing Quality of Care data - resources",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "index.html#necessary-packages",
    "href": "index.html#necessary-packages",
    "title": "LV: Analysing Quality of Care data - resources",
    "section": "Necessary packages",
    "text": "Necessary packages\nIf you do not have these installed (‚ÄúCould not find package xyz‚Äù) you need to install the package.\n\n# load necessary packages\n# data preparation\nlibrary(readr)\nlibrary(tibble)\nlibrary(dplyr)\n\n# visualization\nlibrary(ggplot2)\n\n# missings\nlibrary(naniar)\n\n# tables\nlibrary(kableExtra)"
  },
  {
    "objectID": "index.html#import-dataset",
    "href": "index.html#import-dataset",
    "title": "LV: Analysing Quality of Care data - resources",
    "section": "Import dataset",
    "text": "Import dataset\n\nBy storing it into an object with the zz_-prefix, you can easier modify it afterwards without re-importing\n\n\n# import the dataset using the {readr}-package\nzz_dataset &lt;- read_csv(\"data/2023-02-20_QoC_sample_dataset.csv\", \n                       show_col_types = FALSE)"
  },
  {
    "objectID": "index.html#check-the-import",
    "href": "index.html#check-the-import",
    "title": "LV: Analysing Quality of Care data - resources",
    "section": "Check the import",
    "text": "Check the import\nBy looking at the top five rows (the ‚Äúhead‚Äù of the dataset):\n\nhead(zz_dataset, n = 5)\n\n# A tibble: 5 √ó 6\n  patient_ids sex   unit   adm          los disch     \n        &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;date&gt;    \n1       13679 f     ward_B 2022-01-27    10 2022-02-06\n2       15231 f     ward_A 2022-01-16     3 2022-01-19\n3       10758 f     ward_A 2022-01-10    18 2022-01-28\n4       10319 m     ward_B 2022-01-20     7 2022-01-27\n5       17826 m     ward_A 2022-01-26     5 2022-01-31\n\n\n\nSeems the input worked as expected üòå\nthe columns ‚Äòsex‚Äô and ‚Äòunit‚Äô should be a factor, not a character\n\n\n# change 'sex' into factor\ndataset &lt;- \n  zz_dataset %&gt;% \n  mutate(sex = as.factor(sex), \n         unit = as.factor(unit))\n\n‚Ä¶ then again check the top five rows:\n\nhead(dataset, n = 5)\n\n# A tibble: 5 √ó 6\n  patient_ids sex   unit   adm          los disch     \n        &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;date&gt;    \n1       13679 f     ward_B 2022-01-27    10 2022-02-06\n2       15231 f     ward_A 2022-01-16     3 2022-01-19\n3       10758 f     ward_A 2022-01-10    18 2022-01-28\n4       10319 m     ward_B 2022-01-20     7 2022-01-27\n5       17826 m     ward_A 2022-01-26     5 2022-01-31"
  },
  {
    "objectID": "dupes.html#different-types-of-duplicates",
    "href": "dupes.html#different-types-of-duplicates",
    "title": "1¬† Duplicates",
    "section": "1.1 Different ‚Äòtypes‚Äô of duplicates",
    "text": "1.1 Different ‚Äòtypes‚Äô of duplicates\n\nfully duplicated entries are ‚Äòeasy‚Äô to catch but rare\npartially duplicated or mismatched entries are frequent but require more sophisticated checking\n\n\n1.1.1 Fully duplicated entries\n\nbase::duplicated() tests for fully duplicated entries (same row twice)\nseveral options to use:\n\n\n# check numbers of duplicated rows\ntable(duplicated(dataset))\n\n\nFALSE  TRUE \n   99     1 \n\n\n\nadd a column is_dupe with information:\n\n\n# adding column\ndataset$is_dupe &lt;- duplicated(dataset)\n\n# check entry\nhead(dataset)\n\n# A tibble: 6 √ó 7\n  patient_ids sex   unit   adm          los disch      is_dupe\n        &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;lgl&gt;  \n1       13679 f     ward_B 2022-01-27    10 2022-02-06 FALSE  \n2       15231 f     ward_A 2022-01-16     3 2022-01-19 FALSE  \n3       10758 f     ward_A 2022-01-10    18 2022-01-28 FALSE  \n4       10319 m     ward_B 2022-01-20     7 2022-01-27 FALSE  \n5       17826 m     ward_A 2022-01-26     5 2022-01-31 FALSE  \n6       17463 f     ward_A 2022-01-30    33 2022-03-04 FALSE  \n\n\n\n\n1.1.2 Fully distinct entries\n\ndplyr::distinct() tests for full distinct entries (same row twice)\nbasically the opposite of base::duplicated()\n\n\n\n1.1.3 Identify duplicates by counting the key (or key-index-pair)\n\n# counting the number of rows per patient_ids\n# using sort = T moves the highest number on top\ncount(dataset, patient_ids, sort = T)\n\n# A tibble: 96 √ó 2\n   patient_ids     n\n         &lt;dbl&gt; &lt;int&gt;\n 1       10119     2\n 2       12335     2\n 3       16839     2\n 4       18098     2\n 5       10236     1\n 6       10319     1\n 7       10522     1\n 8       10647     1\n 9       10758     1\n10       10875     1\n# ‚Ä¶ with 86 more rows\n\n\n\nthere are several duplicated rows - although duplicated() only identified one fully duplicated entry\nthis requires a further examination of these cases by identfiying the ‚Äúweird‚Äù ids and in a second create a subset (filtered) dataset, to check these cases:\n\n\n# keep the weird ids\nweird_ids &lt;- \n  count(dataset, patient_ids, sort = T) %&gt;% \n  filter(n &gt; 1 ) %&gt;% \n  pull(patient_ids)\n\n# filter the dataset by these values\ndataset %&gt;% \n  filter(patient_ids %in% weird_ids) %&gt;% \n  arrange(patient_ids)\n\n# A tibble: 8 √ó 7\n  patient_ids sex   unit   adm          los disch      is_dupe\n        &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;lgl&gt;  \n1       10119 f     ward_A 2022-01-08    27 2022-02-04 FALSE  \n2       10119 f     ward_A 2022-01-08    27 2022-02-04 TRUE   \n3       12335 m     ward_B 2022-01-15    21 2022-02-05 FALSE  \n4       12335 m     ward_B 2022-01-25    25 2022-02-19 FALSE  \n5       16839 m     ward_A 2022-01-08    16 2022-01-24 FALSE  \n6       16839 f     ward_B 2022-01-08    NA NA         FALSE  \n7       18098 f     ward_B 2022-01-13    16 2022-01-29 FALSE  \n8       18098 f     ward_B 2022-01-13    NA NA         FALSE"
  },
  {
    "objectID": "missings.html#explore-missings-in-sample-data",
    "href": "missings.html#explore-missings-in-sample-data",
    "title": "2¬† Missings",
    "section": "2.1 Explore missings in sample data",
    "text": "2.1 Explore missings in sample data\n\nnaniar::vis_miss(dataset)\n\n\n\n\n\nThere are only few missings\nNA‚Äôs in disch are linked to NA‚Äôs in los"
  },
  {
    "objectID": "missings.html#dataframe-from-slides",
    "href": "missings.html#dataframe-from-slides",
    "title": "2¬† Missings",
    "section": "2.2 Dataframe from slides",
    "text": "2.2 Dataframe from slides\n\nby using the command set.seed(1234) you should be able to reproduce the same dataframe as in the slides\n\n\n# set seed for reproducibility\nset.seed(1234)\n\n# create a sample-df with 100 rows and \n# 3 variables\ndf_miss &lt;- \n  tibble(id = 1:100,\n         var1 = sample(\n           c(1:4, NA_real_), 100, T),\n         var2 = sample(\n           c(1:4, NA_real_), 100, T))\n\n# first 4 entries\nhead(df_miss, 4) \n\n# A tibble: 4 √ó 3\n     id  var1  var2\n  &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     1     4     3\n2     2     2     1\n3     3    NA     3\n4     4     4     4\n\n# quick summary of proportional missings\nnaniar::miss_prop_summary(df_miss)\n\n# A tibble: 1 √ó 3\n     df   var  case\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.127 0.667  0.34\n\n\n\nnaniar::vis_miss(df_miss)"
  },
  {
    "objectID": "dataviz.html#prepare-data-for-visualisation---wide-to-long",
    "href": "dataviz.html#prepare-data-for-visualisation---wide-to-long",
    "title": "3¬† Visualising data",
    "section": "3.1 Prepare data for visualisation - wide to long?",
    "text": "3.1 Prepare data for visualisation - wide to long?\nConsider the example from class where four people (A, B, C, D) were asked about their preferences to access e-banking:\n\n\n\nTidy dataframe - wide format\n\n\nperson_id\nuses_phone\nuses_computer\n\n\n\n\nA\nyes\nno\n\n\nB\nyes\nyes\n\n\nC\nyes\nno\n\n\nD\nno\nyes"
  },
  {
    "objectID": "dataviz.html#prepare-data-for-visualisation",
    "href": "dataviz.html#prepare-data-for-visualisation",
    "title": "3¬† Visualising data",
    "section": "3.1 Prepare data for visualisation",
    "text": "3.1 Prepare data for visualisation\nConsider the example from class where four people (A, B, C, D) were asked about their tool-preferences for accessing their e-banking account:\n\n\n\nTidy dataframe - wide format\n\n\nperson_id\nuses_phone\nuses_computer\n\n\n\n\nA\nyes\nno\n\n\nB\nyes\nyes\n\n\nC\nyes\nno\n\n\nD\nno\nyes\n\n\n\n\n\n\n\n\nFormally, this dataframe is in ‚Äòtidy‚Äô format and the unit of analysis is the person_id\n\nNow we represent the same information in a barchart, to compare the frequencies:\n\n\n\n\n\nBut how did we actually input the data? If we try this we only get the variable uses_computer on the x-axis (with the values no and yes):\n\nggplot(data = wldf, aes(x = uses_computer)) +\n  geom_bar()\n\n\n\n\nWhen we go back to the original plot:\n\n\n\n\n\n\nwe see that we want a variable tool on the x-axis, that has the values ‚Äòuses_computer‚Äô and ‚Äòuses_phone‚Äô\nwe want a variable answer that has the values ‚Äòno‚Äô and ‚Äòyes‚Äô\n\n(- we possibly want a variable percentage on the y-axis, that has numeric values according to the proportions)\n\nIn summary, the format of the data needs to change in order to plot"
  },
  {
    "objectID": "dataviz.html#option-1-wide-to-long-a.k.a-stack",
    "href": "dataviz.html#option-1-wide-to-long-a.k.a-stack",
    "title": "3¬† Visualising data",
    "section": "3.2 Option 1: wide-to-long a.k.a stack",
    "text": "3.2 Option 1: wide-to-long a.k.a stack\nIn this option we use tidyr::pivot_longer() to create a dataframe in long format:\n\n# we want to stack the columns uses_computer and uses_phone\nlong_df &lt;- \n  wldf %&gt;% \n  pivot_longer(cols = c(uses_computer, uses_phone), \n               names_to = \"tool\", \n               values_to = \"answer\") \n\n# print the df\nlong_df\n\n# A tibble: 8 √ó 3\n  person_id tool          answer\n  &lt;chr&gt;     &lt;chr&gt;         &lt;chr&gt; \n1 A         uses_computer no    \n2 A         uses_phone    yes   \n3 B         uses_computer yes   \n4 B         uses_phone    yes   \n5 C         uses_computer no    \n6 C         uses_phone    yes   \n7 D         uses_computer yes   \n8 D         uses_phone    no    \n\n\n\nthis dataframe now has the variable tool and answer for the ggplot2-code using geom_bar(position = \"fill) :\n\n\nggplot(long_df, aes(x = tool, fill = answer)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\nof course, this needed some further ‚Äòlayout-work‚Äô to improve the labeling of scales and the removal of the grey-background\n\n\nggplot(long_df, aes(x = tool, fill = answer)) +\n  geom_bar(position = \"fill\") +\n  scale_y_continuous(name = NULL, \n                     labels = scales::percent) +\n  theme_minimal() +\n  theme(text = element_text(size = 16))"
  },
  {
    "objectID": "dataviz.html#option-2-aggregation-of-values-before-plotting",
    "href": "dataviz.html#option-2-aggregation-of-values-before-plotting",
    "title": "3¬† Visualising data",
    "section": "3.3 Option 2: Aggregation of values before plotting",
    "text": "3.3 Option 2: Aggregation of values before plotting\nAnother option is to aggregate (or summarise) values manually, before we pass them to a plotting function (the example above is not really a good example for this), but the code might be handy if you have more variables than 2 for this situation.\nIn the example, we‚Äôd need to have three variables as indicated above: tool (for the x-axis), answer for the fill and percent for the percentage. We can create this table with:\n\nagg_data &lt;- \n  wldf |&gt; \n  select(uses_computer, uses_phone) |&gt; \n  as.list() |&gt; \n  map_dfr(~janitor::tabyl(.x), .id = \"tool\") |&gt; \n  rename(answer = .x)\n\n# print agg_data\nagg_data\n\n          tool answer n percent\n uses_computer     no 2    0.50\n uses_computer    yes 2    0.50\n    uses_phone     no 1    0.25\n    uses_phone    yes 3    0.75\n\n\nAnd then we can plot it:\n\nggplot(data = agg_data, aes(x = tool, y = percent, fill = answer)) +\n  geom_col(position = \"stack\")\n\n\n\n\n\nCareful: instead of using geom_bar(position=\"fill\") without a y-variable, here we pass the percent-value to the y-axis and use geom_col(position=\"stack\") for the answer-variable"
  }
]